// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.2

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	paperRuleFieldNames          = builder.RawFieldNames(&PaperRule{})
	paperRuleRows                = strings.Join(paperRuleFieldNames, ",")
	paperRuleRowsExpectAutoSet   = strings.Join(stringx.Remove(paperRuleFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	paperRuleRowsWithPlaceHolder = strings.Join(stringx.Remove(paperRuleFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	paperRuleModel interface {
		Insert(ctx context.Context, data *PaperRule) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*PaperRule, error)
		Update(ctx context.Context, data *PaperRule) error
		Delete(ctx context.Context, id int64) error
		FindAllByUserId(ctx context.Context, userId int64) ([]PaperRule, error)
	}

	defaultPaperRuleModel struct {
		conn  sqlx.SqlConn
		table string
	}

	PaperRule struct {
		Id           int64     `db:"id"`            // 规则ID
		Name         string    `db:"name"`          // 规则名称
		TotalScore   int64     `db:"total_score"`   // 随机生成的试卷总分
		CreatedBy    int64     `db:"created_by"`    // 创建者ID（关联 user表）
		BankId       int64     `db:"bank_id"`       // 关联题库ID
		NumQuestions string    `db:"num_questions"` // 各题型随机抽取数量（{"1": 5, "2": 3}）
		ScoreConfig  string    `db:"score_config"`  // 各题型分值（{"1": 2, "2": 3}）
		CreatedAt    time.Time `db:"created_at"`    // 创建时间
		UpdatedAt    time.Time `db:"updated_at"`    // 最后修改时间
	}
)

func newPaperRuleModel(conn sqlx.SqlConn) *defaultPaperRuleModel {
	return &defaultPaperRuleModel{
		conn:  conn,
		table: "`paper_rule`",
	}
}

func (m *defaultPaperRuleModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultPaperRuleModel) FindOne(ctx context.Context, id int64) (*PaperRule, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", paperRuleRows, m.table)
	var resp PaperRule
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPaperRuleModel) Insert(ctx context.Context, data *PaperRule) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, paperRuleRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Name, data.TotalScore, data.CreatedBy, data.BankId, data.NumQuestions, data.ScoreConfig)
	return ret, err
}

func (m *defaultPaperRuleModel) Update(ctx context.Context, data *PaperRule) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, paperRuleRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Name, data.TotalScore, data.CreatedBy, data.BankId, data.NumQuestions, data.ScoreConfig, data.Id)
	return err
}

func (m *defaultPaperRuleModel) tableName() string {
	return m.table
}
func (m *defaultPaperRuleModel) FindAllByUserId(ctx context.Context, userId int64) ([]PaperRule, error) {
	query := fmt.Sprintf("SELECT %s FROM %s WHERE `created_by` = ?", paperRuleRows, m.table)
	var rules []PaperRule
	err := m.conn.QueryRowsCtx(ctx, &rules, query, userId)
	switch err {
	case nil:
		return rules, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}
