// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.2

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	paperFieldNames          = builder.RawFieldNames(&Paper{})
	paperRows                = strings.Join(paperFieldNames, ",")
	paperRowsExpectAutoSet   = strings.Join(stringx.Remove(paperFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	paperRowsWithPlaceHolder = strings.Join(stringx.Remove(paperFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	paperModel interface {
		Insert(ctx context.Context, data *Paper) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Paper, error)
		Update(ctx context.Context, data *Paper) error
		Delete(ctx context.Context, id int64) error
		FindAllByUserId(ctx context.Context, userId int64) ([]*Paper, error)
		FindPaperByUserId(ctx context.Context, userId int64, paperId int64) (*Paper, error)
	}

	defaultPaperModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Paper struct {
		Id         int64     `db:"id"`          // 试卷ID
		Name       string    `db:"name"`        // 试卷名称
		TotalScore int64     `db:"total_score"` // 试卷总分
		CreatedBy  int64     `db:"created_by"`  // 创建者ID（关联user表）
		Questions  string    `db:"questions"`   // 试卷题目列表（存储题目ID和分值的JSON）
		CreatedAt  time.Time `db:"created_at"`  // 创建时间
		UpdatedAt  time.Time `db:"updated_at"`  // 最后修改时间
	}
)

func newPaperModel(conn sqlx.SqlConn) *defaultPaperModel {
	return &defaultPaperModel{
		conn:  conn,
		table: "`paper`",
	}
}

func (m *defaultPaperModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultPaperModel) FindOne(ctx context.Context, id int64) (*Paper, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", paperRows, m.table)
	var resp Paper
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPaperModel) Insert(ctx context.Context, data *Paper) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, paperRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Name, data.TotalScore, data.CreatedBy, data.Questions)
	return ret, err
}

func (m *defaultPaperModel) Update(ctx context.Context, data *Paper) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, paperRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Name, data.TotalScore, data.CreatedBy, data.Questions, data.Id)
	return err
}

func (m *defaultPaperModel) tableName() string {
	return m.table
}

func (m *defaultPaperModel) FindAllByUserId(ctx context.Context, userId int64) ([]*Paper, error) {
	query := "SELECT * FROM paper WHERE created_by = ? ORDER BY created_at DESC"
	var papers []*Paper
	err := m.conn.QueryRowsCtx(ctx, &papers, query, userId)
	if err != nil {
		return nil, err
	}
	return papers, nil
}

func (m *defaultPaperModel) FindPaperByUserId(ctx context.Context, userId int64, paperId int64) (*Paper, error) {
	query := "SELECT * FROM paper WHERE id = ? AND created_by = ? LIMIT 1"
	var paper Paper
	err := m.conn.QueryRowCtx(ctx, &paper, query, paperId, userId)
	if err != nil {
		if err == sqlx.ErrNotFound {
			return nil, ErrNotFound
		}
		return nil, err
	}
	return &paper, nil
}
