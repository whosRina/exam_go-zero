// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.2

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	examRandomConfigFieldNames          = builder.RawFieldNames(&ExamRandomConfig{})
	examRandomConfigRows                = strings.Join(examRandomConfigFieldNames, ",")
	examRandomConfigRowsExpectAutoSet   = strings.Join(stringx.Remove(examRandomConfigFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	examRandomConfigRowsWithPlaceHolder = strings.Join(stringx.Remove(examRandomConfigFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	examRandomConfigModel interface {
		Insert(ctx context.Context, data *ExamRandomConfig) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*ExamRandomConfig, error)
		Update(ctx context.Context, data *ExamRandomConfig) error
		Delete(ctx context.Context, id int64) error
	}

	defaultExamRandomConfigModel struct {
		conn  sqlx.SqlConn
		table string
	}

	ExamRandomConfig struct {
		Id             int64     `db:"id"`               // 记录ID
		ExamId         int64     `db:"exam_id"`          // 关联exam表
		QuestionBankId int64     `db:"question_bank_id"` // 关联question_bank题库ID
		NumQuestions   string    `db:"num_questions"`    // 各题型随机抽取数量（{"1": 5, "2": 3}）
		ScoreConfig    string    `db:"score_config"`     // 各题型分值（{"1": 2, "2": 3}）
		CreatedAt      time.Time `db:"created_at"`       // 记录创建时间
	}
)

func newExamRandomConfigModel(conn sqlx.SqlConn) *defaultExamRandomConfigModel {
	return &defaultExamRandomConfigModel{
		conn:  conn,
		table: "`exam_random_config`",
	}
}

func (m *defaultExamRandomConfigModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultExamRandomConfigModel) FindOne(ctx context.Context, id int64) (*ExamRandomConfig, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", examRandomConfigRows, m.table)
	var resp ExamRandomConfig
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultExamRandomConfigModel) Insert(ctx context.Context, data *ExamRandomConfig) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, examRandomConfigRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.ExamId, data.QuestionBankId, data.NumQuestions, data.ScoreConfig)
	return ret, err
}

func (m *defaultExamRandomConfigModel) Update(ctx context.Context, data *ExamRandomConfig) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, examRandomConfigRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.ExamId, data.QuestionBankId, data.NumQuestions, data.ScoreConfig, data.Id)
	return err
}

func (m *defaultExamRandomConfigModel) tableName() string {
	return m.table
}
