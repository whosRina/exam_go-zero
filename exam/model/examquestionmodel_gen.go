// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.2

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	examQuestionFieldNames          = builder.RawFieldNames(&ExamQuestion{})
	examQuestionRows                = strings.Join(examQuestionFieldNames, ",")
	examQuestionRowsExpectAutoSet   = strings.Join(stringx.Remove(examQuestionFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	examQuestionRowsWithPlaceHolder = strings.Join(stringx.Remove(examQuestionFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	examQuestionModel interface {
		Insert(ctx context.Context, data *ExamQuestion) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*ExamQuestion, error)
		Update(ctx context.Context, data *ExamQuestion) error
		Delete(ctx context.Context, id int64) error
	}

	defaultExamQuestionModel struct {
		conn  sqlx.SqlConn
		table string
	}

	ExamQuestion struct {
		Id              int64     `db:"id"`                // 记录ID
		ExamId          int64     `db:"exam_id"`           // 关联exam表
		QuestionId      int64     `db:"question_id"`       // 关联question表
		QuestionType    int64     `db:"question_type"`     // 题型 (1=单选，2=多选，3=判断，4=简答等)
		Score           int64     `db:"score"`             // 该题分值
		IsManualGrading bool      `db:"is_manual_grading"` // 该题是否需要人工评分
		CreatedAt       time.Time `db:"created_at"`        // 记录创建时间
	}
)

func newExamQuestionModel(conn sqlx.SqlConn) *defaultExamQuestionModel {
	return &defaultExamQuestionModel{
		conn:  conn,
		table: "`exam_question`",
	}
}

func (m *defaultExamQuestionModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultExamQuestionModel) FindOne(ctx context.Context, id int64) (*ExamQuestion, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", examQuestionRows, m.table)
	var resp ExamQuestion
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultExamQuestionModel) Insert(ctx context.Context, data *ExamQuestion) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, examQuestionRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.ExamId, data.QuestionId, data.QuestionType, data.Score, data.IsManualGrading)
	return ret, err
}

func (m *defaultExamQuestionModel) Update(ctx context.Context, data *ExamQuestion) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, examQuestionRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.ExamId, data.QuestionId, data.QuestionType, data.Score, data.IsManualGrading, data.Id)
	return err
}

func (m *defaultExamQuestionModel) tableName() string {
	return m.table
}
