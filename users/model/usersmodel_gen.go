// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.2

package model

import (
	"context"
	"crypto/md5"
	"database/sql"
	"errors"
	"fmt"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"log"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	usersFieldNames          = builder.RawFieldNames(&Users{})
	usersRows                = strings.Join(usersFieldNames, ",")
	usersRowsExpectAutoSet   = strings.Join(stringx.Remove(usersFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	usersRowsWithPlaceHolder = strings.Join(stringx.Remove(usersFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	usersModel interface {
		Insert(ctx context.Context, data *Users) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Users, error)
		Update(ctx context.Context, data *Users) error
		Delete(ctx context.Context, id int64) error
		FindByUsername(ctx context.Context, username string) (*Users, error)
		InitAdminUser(ctx context.Context) error
		FindAll(ctx context.Context) ([]*Users, error)
	}

	defaultUsersModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Users struct {
		Id         int64        `db:"id"`          // 用户id（主键）
		Type       int64        `db:"type"`        // 用户类型（0-管理员、1-教师、2-学生）
		Name       string       `db:"name"`        // 用户名
		Username   string       `db:"username"`    // 账号（工号/学号）
		Passwd     string       `db:"passwd"`      // 用户密码哈希值
		Salt       int64        `db:"salt"`        // 盐
		CreateTime time.Time    `db:"create_time"` // 创建时间
		DeleteTime sql.NullTime `db:"delete_time"` // 删除时间
		IsDelete   int64        `db:"is_delete"`   // 是否删除（0-未删除，1-已删除）
	}
)

func newUsersModel(conn sqlx.SqlConn) *defaultUsersModel {
	return &defaultUsersModel{
		conn:  conn,
		table: "`users`",
	}
}

func (m *defaultUsersModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultUsersModel) FindOne(ctx context.Context, id int64) (*Users, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? AND is_delete = 0 limit 1", usersRows, m.table)
	var resp Users
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUsersModel) Insert(ctx context.Context, data *Users) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?)", m.table, usersRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Type, data.Name, data.Username, data.Passwd, data.Salt, data.DeleteTime, data.IsDelete)
	return ret, err
}

func (m *defaultUsersModel) Update(ctx context.Context, newData *Users) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, usersRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.Type, newData.Name, newData.Username, newData.Passwd, newData.Salt, newData.DeleteTime, newData.IsDelete, newData.Id)
	return err
}

func (m *defaultUsersModel) tableName() string {
	return m.table
}
func (m *defaultUsersModel) FindByUsername(ctx context.Context, username string) (*Users, error) {
	query := fmt.Sprintf("SELECT %s FROM %s WHERE username = ? AND is_delete = 0 LIMIT 1", usersRows, m.table)
	var user Users
	err := m.conn.QueryRowCtx(ctx, &user, query, username)
	if err != nil {
		if err == sqlc.ErrNotFound {
			return nil, errors.New("用户不存在")
		}
		return nil, err
	}
	return &user, nil
}

func (m *defaultUsersModel) InitAdminUser(ctx context.Context) error {
	// 检查users表是否为空
	var count int
	query := "SELECT COUNT(*) FROM users WHERE username = ? AND is_delete = 0"
	if err := m.conn.QueryRowCtx(ctx, &count, query, "admin"); err != nil {
		return fmt.Errorf("检查管理员账户失败:%w", err)
	}

	// 若admin账号已存在，则不需要插入
	if count > 0 {
		log.Println("默认管理员已存在，无需初始化")
		return nil
	}

	// 插入默认管理员
	admin := Users{
		Type:     0,
		Name:     "管理员",
		Username: "admin",
		Passwd:   hashPassword("admin123", 1234),
		Salt:     1234,
		IsDelete: 0,
	}

	if _, err := m.Insert(ctx, &admin); err != nil {
		return fmt.Errorf("插入管理员失败: %w", err)
	}

	log.Println("默认管理员账号创建成功！")
	return nil
}

// 抽取密码哈希逻辑，让代码更清晰
func hashPassword(password string, salt int) string {
	hash := md5.New()
	hash.Write([]byte(fmt.Sprintf("%d%s", salt, password))) // 确保盐在前
	return fmt.Sprintf("%x", hash.Sum(nil))
}

func (m *defaultUsersModel) FindAll(ctx context.Context) ([]*Users, error) {
	query := "SELECT * FROM users WHERE is_delete = 0"
	var users []*Users
	err := m.conn.QueryRowsCtx(ctx, &users, query)
	if err != nil {
		return nil, err
	}
	return users, nil
}
