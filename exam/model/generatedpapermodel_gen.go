// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.2

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	generatedPaperFieldNames          = builder.RawFieldNames(&GeneratedPaper{})
	generatedPaperRows                = strings.Join(generatedPaperFieldNames, ",")
	generatedPaperRowsExpectAutoSet   = strings.Join(stringx.Remove(generatedPaperFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	generatedPaperRowsWithPlaceHolder = strings.Join(stringx.Remove(generatedPaperFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	generatedPaperModel interface {
		Insert(ctx context.Context, data *GeneratedPaper) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*GeneratedPaper, error)
		Update(ctx context.Context, data *GeneratedPaper) error
		Delete(ctx context.Context, id int64) error
	}

	defaultGeneratedPaperModel struct {
		conn  sqlx.SqlConn
		table string
	}

	GeneratedPaper struct {
		Id         int64     `db:"id"`          // 记录ID
		ExamId     int64     `db:"exam_id"`     // 关联exam表
		StudentId  int64     `db:"student_id"`  // 关联学生（user表）
		Questions  string    `db:"questions"`   // 学生随机生成的试卷题目列表（题目ID和分值的JSON）
		TotalScore int64     `db:"total_score"` // 试卷总分
		CreatedAt  time.Time `db:"created_at"`  // 记录创建时间
	}
)

func newGeneratedPaperModel(conn sqlx.SqlConn) *defaultGeneratedPaperModel {
	return &defaultGeneratedPaperModel{
		conn:  conn,
		table: "`generated_paper`",
	}
}

func (m *defaultGeneratedPaperModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultGeneratedPaperModel) FindOne(ctx context.Context, id int64) (*GeneratedPaper, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", generatedPaperRows, m.table)
	var resp GeneratedPaper
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultGeneratedPaperModel) Insert(ctx context.Context, data *GeneratedPaper) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, generatedPaperRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.ExamId, data.StudentId, data.Questions, data.TotalScore)
	return ret, err
}

func (m *defaultGeneratedPaperModel) Update(ctx context.Context, data *GeneratedPaper) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, generatedPaperRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.ExamId, data.StudentId, data.Questions, data.TotalScore, data.Id)
	return err
}

func (m *defaultGeneratedPaperModel) tableName() string {
	return m.table
}
