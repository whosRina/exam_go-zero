// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.2

package model

import (
	"context"
	"database/sql"
	"exam-system/questionBank/internal/types"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	questionFieldNames          = builder.RawFieldNames(&Question{})
	questionRows                = strings.Join(questionFieldNames, ",")
	questionRowsExpectAutoSet   = strings.Join(stringx.Remove(questionFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	questionRowsWithPlaceHolder = strings.Join(stringx.Remove(questionFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	questionModel interface {
		Insert(ctx context.Context, data *Question) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Question, error)
		Update(ctx context.Context, data *Question) error
		Delete(ctx context.Context, id int64) error
		FindQuestionsByBankAndType(ctx context.Context, bankId int64, questionType int64, offset int, size int) ([]*types.Question, error)
		CountQuestionsByBankAndType(ctx context.Context, bankId int64, questionType int64) (int64, error)
	}

	defaultQuestionModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Question struct {
		Id        int64     `db:"id"`         // 题目ID
		BankId    int64     `db:"bank_id"`    // 题库ID（关联question_bank表）
		Content   string    `db:"content"`    // 题目内容
		Type      int64     `db:"type"`       // 题型 (1=单选，2=多选，3=判断，4=简答)
		Options   string    `db:"options"`    // 可选项（存储JSON格式）
		Answer    string    `db:"answer"`     // 正确答案（存储JSON格式）
		CreatedBy int64     `db:"created_by"` // 创建者ID（关联user表）
		CreatedAt time.Time `db:"created_at"` // 创建时间
	}
)

func newQuestionModel(conn sqlx.SqlConn) *defaultQuestionModel {
	return &defaultQuestionModel{
		conn:  conn,
		table: "`question`",
	}
}

func (m *defaultQuestionModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultQuestionModel) FindOne(ctx context.Context, id int64) (*Question, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", questionRows, m.table)
	var resp Question
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultQuestionModel) Insert(ctx context.Context, data *Question) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, questionRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.BankId, data.Content, data.Type, data.Options, data.Answer, data.CreatedBy)
	return ret, err
}

func (m *defaultQuestionModel) Update(ctx context.Context, data *Question) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, questionRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.BankId, data.Content, data.Type, data.Options, data.Answer, data.CreatedBy, data.Id)
	return err
}

func (m *defaultQuestionModel) tableName() string {
	return m.table
}
func (m *defaultQuestionModel) FindQuestionsByBankAndType(ctx context.Context, bankId int64, questionType int64, offset int, size int) ([]*types.Question, error) {
	query := `SELECT * FROM question WHERE bank_id = ? AND type = ? LIMIT ?, ?`
	var questions []*types.Question
	err := m.conn.QueryRowsCtx(ctx, &questions, query, bankId, questionType, offset, size)
	if err != nil {
		return nil, err
	}
	return questions, nil
}
func (m *defaultQuestionModel) CountQuestionsByBankAndType(ctx context.Context, bankId int64, questionType int64) (int64, error) {
	query := `
        SELECT 
            COUNT(*) 
        FROM 
            question 
        WHERE 
            bank_id = ? AND type = ?`

	var total int64
	err := m.conn.QueryRowCtx(ctx, &total, query, bankId, questionType)
	if err != nil {
		return 0, err
	}

	return total, nil
}
