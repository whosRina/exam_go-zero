// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.2

package types

import (
	"time"
)

type CreatePaperRequest struct {
	Name       string `json:"name"`       // 试卷名称
	TotalScore int    `json:"totalScore"` // 试卷总分
	Questions  string `json:"questions"`  // 试卷题目列表（JSON格式，包含题目ID和分值）
}
type CreatePaperResponse struct {
	Message string `json:"message"` // 响应消息
}

type UpdatePaperRequest struct {
	PaperID    int    `json:"paperId"`    // 试卷ID
	Name       string `json:"name"`       // 试卷名称
	TotalScore int    `json:"totalScore"` // 试卷总分
	Questions  string `json:"questions"`  // 试卷题目列表（JSON 格式，包含题目ID和分值）
}

type UpdatePaperResponse struct {
	Message string `json:"message"` // 响应消息
}

type DeletePaperRequest struct {
	PaperID int `json:"paperId"` // 试卷ID
}

type DeletePaperResponse struct {
	Message string `json:"message"` // 响应消息
}

type PaperInfo struct {
	Id         int64     `json:"id"`
	Name       string    `json:"name"`
	TotalScore int       `json:"totalScore"`
	CreatedBy  int64     `json:"createdBy"`
	CreatedAt  time.Time `json:"createdAt"`
	UpdatedAt  time.Time `json:"updatedAt"`
}

type PaperListResponse struct {
	PaperList []PaperInfo `json:"paperList"`
}

type GetPaperWithAnswersRequest struct {
	PaperId int `json:"paperId"`
}

type QuestionWithAnswer struct {
	QuestionId int    `json:"questionId"`
	Content    string `json:"content"`
	Type       int    `json:"type"`
	Options    string `json:"options"`
	Answer     string `json:"answer"`
	Score      int    `json:"score"`
}

type PaperWithAnswersResponse struct {
	PaperId    int                  `json:"paperId"`
	Name       string               `json:"name"`
	TotalScore int                  `json:"totalScore"`
	Questions  []QuestionWithAnswer `json:"questions"`
}

type Question struct {
	Id        int64     `db:"id"`         // 题目ID
	BankId    int64     `db:"bank_id"`    // 题库ID（关联question_bank表）
	Content   string    `db:"content"`    // 题目内容
	Type      int64     `db:"type"`       // 题型 (1=单选，2=多选，3=判断，4=简答)
	Options   string    `db:"options"`    // 可选项（存储JSON格式）
	Answer    string    `db:"answer"`     // 正确答案（存储JSON格式）
	CreatedBy int64     `db:"created_by"` // 创建者ID（关联user表）
	CreatedAt time.Time `db:"created_at"` // 创建时间
}

// CreatePaperRuleRequest 请求参数结构体
type CreatePaperRuleRequest struct {
	Name         string `json:"name"`         // 规则名称
	TotalScore   int    `json:"totalScore"`   // 随机组卷规则的总分
	BankID       int    `json:"bankId"`       // 关联的题库ID
	NumQuestions string `json:"numQuestions"` // 各题型随机抽取数量，JSON格式（如：{"1": 5, "2": 3}）
	ScoreConfig  string `json:"scoreConfig"`  // 各题型的分值，JSON格式（如：{"1": 2, "2": 3}）
}

// CreatePaperRuleResponse 响应参数结构体
type CreatePaperRuleResponse struct {
	Message string `json:"message"` // 返回消息，表示操作结果
}

type DeletePaperRuleRequest struct {
	RuleID int `json:"ruleId"` // 要删除的规则 ID
}

type DeletePaperRuleResponse struct {
	Message string `json:"message"` // 返回删除成功或失败信息
}

type PaperRuleListResponse struct {
	RuleList []PaperRuleInfo `json:"ruleList"` // 规则列表
}

type PaperRuleInfo struct {
	Id           int       `json:"id"`           // 规则ID
	Name         string    `json:"name"`         // 规则名称
	TotalScore   int       `json:"totalScore"`   // 总分
	CreatedBy    int       `json:"createdBy"`    // 创建者ID
	BankId       int       `json:"bankId"`       // 题库ID
	NumQuestions string    `json:"numQuestions"` // 各题型抽取数量 (JSON格式)
	ScoreConfig  string    `json:"scoreConfig"`  // 题型分值配置 (JSON格式)
	CreatedAt    time.Time `json:"createdAt"`    // 创建时间
	UpdatedAt    time.Time `json:"updatedAt"`    // 更新时间
}

type UpdatePaperRuleRequest struct {
	RuleID       int64  `json:"ruleId"`       // 规则ID
	Name         string `json:"name"`         // 规则名称
	TotalScore   int    `json:"totalScore"`   // 试卷总分
	BankID       int64  `json:"bankId"`       // 关联题库ID
	NumQuestions string `json:"numQuestions"` // 各题型随机抽取数量 (JSON字符串格式，如 {"1": 5, "2": 3})
	ScoreConfig  string `json:"scoreConfig"`  // 各题型分值 (JSON字符串格式，如 {"1": 2, "2": 3})
}

type UpdatePaperRuleResponse struct {
	Message string `json:"message"` // 返回更新结果消息
}

// 创建考试请求参数
type CreateExamRequest struct {
	Name                  string  `json:"name"`        // 考试名称
	TotalScore            float64 `json:"totalScore"`  // 考试总分
	ExamType              string  `json:"examType"`    // 考试类型: fixed-固定试卷 random-随机试卷
	StartTime             string  `json:"startTime"`   // 开始时间(格式:2006-01-02 15:04:05)
	EndTime               string  `json:"endTime"`     // 结束时间(格式:2006-01-02 15:04:05)
	ClassId               int64   `json:"classId"`     // 所属班级ID
	PaperId               int64   `json:"paperId"`     // 试卷ID
	PaperRuleId           int64   `json:"paperRuleId"` // 组卷规则ID
	RequiresManualGrading bool    `json:"requiresManualGrading"`
	CanViewResults        bool    `json:"canViewResults"`
}

// 创建考试响应结果
type CreateExamResponse struct {
	Message string `json:"message"` // 结果消息
}

// ExamListResponse 考试列表响应结构体
type ExamListResponse struct {
	ExamList []ExamInfo `json:"examList"`
}

// ExamInfo 考试详情信息
type ExamInfo struct {
	Id                    int    `json:"id"`
	Name                  string `json:"name"`
	ClassId               int    `json:"classId"`
	ExamType              string `json:"examType"`
	TotalScore            int    `json:"totalScore"`
	RequiresManualGrading bool   `json:"requiresManualGrading"`
	StartTime             string `json:"startTime"`
	EndTime               string `json:"endTime"`
	CanViewResults        bool   `json:"canViewResults"`
	PaperId               int64  `json:"paperId"`     // 试卷ID
	PaperRuleId           int64  `json:"paperRuleId"` // 组卷规则ID
	ClassName             string `json:"className"`   // 班级名称
	CreateBy              string `json:"createBy"`    // 创建者名称
}

// UpdateExamRequest 更新考试的请求结构体
type UpdateExamRequest struct {
	ExamId                int64  `json:"examId"`                // 考试ID，必须大于0
	Name                  string `json:"name"`                  // 考试名称
	ClassId               int64  `json:"classId"`               // 关联班级ID
	ExamType              string `json:"examType"`              // 考试类型，取值"fixed"或"random"
	TotalScore            int    `json:"totalScore"`            // 考试总分，必须大于0
	StartTime             string `json:"startTime"`             // 考试开始时间，格式例如"2006-01-02 15:04"
	EndTime               string `json:"endTime"`               // 考试结束时间，格式例如"2006-01-02 15:04"
	PaperId               int64  `json:"paperId"`               // 固定试卷ID，examType为fixed时有效，否则可设为 -1
	PaperRuleId           int64  `json:"paperRuleId"`           // 随机组卷规则ID，examType为random时有效，否则可设为 -1
	RequiresManualGrading bool   `json:"requiresManualGrading"` // 是否需要人工阅卷
	CanViewResults        bool   `json:"canViewResults"`        // 考试结束后是否允许学生查看成绩
}

// UpdateExamResponse 更新考试操作的响应结构体
type UpdateExamResponse struct {
	Message string `json:"message"` // 返回消息，例如 "考试更新成功"
}

// DeleteExamRequest 定义删除考试的请求结构
type DeleteExamRequest struct {
	ExamId int64 `json:"examId"` // 需要删除的考试ID
}

// DeleteExamResponse 定义删除考试的响应结构
type DeleteExamResponse struct {
	Message string `json:"message"` // 操作结果信息
}

// SubmitAnswerRequest 学生提交考试答案请求结构体
type SubmitAnswerRequest struct {
	AttemptId int64  `json:"attemptId"` // 考试尝试记录ID
	Answer    string `json:"answer"`    // 学生答案，JSON格式（例如 {"1": "A", "2": "C"}）
}

// SubmitAnswerResponse 学生提交考试答案响应结构体
type SubmitAnswerResponse struct {
	Message string `json:"message"` // 提交结果提示
}

// GetPaperForStudentRequest 学生获取试卷请求结构体
type GetPaperForStudentRequest struct {
	AttemptId int64 `json:"attemptId"` // 考试记录ID
}

// QuestionForStudent 定义返回给学生的题目信息，不包含正确答案
type QuestionForStudent struct {
	QuestionId int         `json:"questionId"`
	Content    string      `json:"content"`
	Type       int         `json:"type"`
	Options    string      `json:"options"` // 根据实际情况，这里可以是string或其他类型
	Score      int         `json:"score"`   // 此题分值
	Answer     interface{} `json:"answer"`  // 返回学生作答的答案（若存在），否则为空
}

// PaperForStudentResponse 定义返回给学生的试卷信息
type PaperForStudentResponse struct {
	PaperName  string               `json:"paperName"`
	TotalScore int                  `json:"totalScore"`
	ExamId     int                  `json:"examId"`
	Questions  []QuestionForStudent `json:"questions"`
	StartTime  time.Time            `json:"startTime"`
	EndTime    time.Time            `json:"endTime"`
}

// StartExamRequest 考试开始请求
type StartExamRequest struct {
	ExamId int64 `json:"examId"` // 考试ID
}

// StartExamResponse 考试开始响应
type StartExamResponse struct {
	Message   string      `json:"message"`   // 响应消息
	AttemptId int64       `json:"attemptId"` // 考试尝试记录ID
	Questions interface{} `json:"questions"` // 题目列表（[{ "id": 28, "score": 20 }, ...]）
}

// GetExamDetailRequest 获取考试详情请求结构体
type GetExamDetailRequest struct {
	ExamId int64 `json:"examId"` // 考试记录ID
}

// GetExamDetailResponse 获取考试详情响应结构体（只包含考生考试状态信息）
type GetExamDetailResponse struct {
	ExamId                int    `json:"examId"`                // 考试ID
	Name                  string `json:"name"`                  // 考试名称
	TotalScore            int    `json:"totalScore"`            // 考试总分
	RequiresManualGrading bool   `json:"requiresManualGrading"` // 是否需要人工阅卷
	StartTime             string `json:"startTime"`             // 考试开始时间，格式 "2006-01-02 15:04"
	EndTime               string `json:"endTime"`               // 考试结束时间，格式 "2006-01-02 15:04"
	CanViewResults        bool   `json:"canViewResults"`        // 考试结束后是否允许学生查看成绩
	ClassName             string `json:"className"`             // 班级名称
	CreateBy              string `json:"createBy"`              // 创建者名称（教师名称）
	Score                 int    `json:"score"`                 // 学生成绩（考试尝试记录中的分数）
	Status                string `json:"status"`                // 学生考试状态
}

// SubmitExamRequest 定义提交考试的请求结构体
type SubmitExamRequest struct {
	AttemptId int64  `json:"attemptId"`
	Answer    string `json:"answer"`
}

// SubmitExamResponse 定义提交考试的响应结构体
type SubmitExamResponse struct {
	Message string `json:"message"` // 返回信息，例如 "考试提交成功"
}

type ListManualGradingRequest struct {
	ExamId int64 `json:"examId"`
}

type ListManualGradingResponse struct {
	AttemptList  []int64 `json:"attemptList"`  // 待批阅记录的ID列表
	PendingCount int     `json:"pendingCount"` // 待批阅数量
}

// ManualGradeRequest 请求结构体
type ManualGradeRequest struct {
	AttemptId int64 `json:"attemptId"`
}

// ShortAnswerDetail 简答题详情结构体
type ShortAnswerDetail struct {
	QuestionId    int    `json:"questionId"`    // 题目ID
	Content       string `json:"content"`       // 题目内容
	Score         int    `json:"score"`         // 参考分值
	Answer        string `json:"answer"`        // 参考答案
	StudentAnswer string `json:"studentAnswer"` // 学生答案
}
type ManualGradeResponse struct {
	Questions []ShortAnswerDetail `json:"questions"`
}

// SubmitManualScoreRequest 提交人工评分的请求结构体
type SubmitManualScoreRequest struct {
	AttemptId    int    `json:"attemptId"`    // 考试尝试ID
	ManualScores string `json:"manualScores"` // 以JSON字符串格式存储的题目评分数据
}

// SubmitManualScoreResponse 提交人工评分的响应结构体
type SubmitManualScoreResponse struct {
	Message    string `json:"message"`    // 返回的消息
	TotalScore int    `json:"totalScore"` // 评分后的总分
}

// ExamDetailRequest 获取考试详情请求结构体（教师端）
type ExamDetailRequest struct {
	ExamId int64 `json:"examId"` // 考试记录ID
}

// ExamDetailResponse 获取考试详情响应结构体（包含所有考生考试状态信息）
type ExamDetailResponse struct {
	ExamId                    int                     `json:"examId"`                    // 考试ID
	Name                      string                  `json:"name"`                      // 考试名称
	TotalScore                int                     `json:"totalScore"`                // 考试总分
	RequiresManualGrading     bool                    `json:"requiresManualGrading"`     // 是否需要人工阅卷
	StartTime                 string                  `json:"startTime"`                 // 考试开始时间，格式 "2006-01-02 15:04"
	EndTime                   string                  `json:"endTime"`                   // 考试结束时间，格式 "2006-01-02 15:04"
	ClassName                 string                  `json:"className"`                 // 班级名称
	CreateBy                  string                  `json:"createBy"`                  // 创建者名称（教师名称）
	Students                  []ExamStudentStatusInfo `json:"students"`                  // 考生考试状态信息
	PendingManualGradingCount int                     `json:"pendingManualGradingCount"` // 需人工批阅的试卷数量
}

// ExamStudentStatusInfo 结构体表示考生的考试状态
type ExamStudentStatusInfo struct {
	StudentId   int64  `json:"studentId"`   // 学生ID
	UserName    string `json:"userName"`    // 学生学号
	StudentName string `json:"studentName"` // 学生姓名
	StartTime   string `json:"startTime"`   // 开始考试时间（格式化）
	SubmitTime  string `json:"submitTime"`  // 提交考试时间（格式化）
	Status      string `json:"status"`      // 考试状态（未开始、进行中、已提交、已评分）
	Score       int    `json:"score"`       // 考试成绩

}
type ExportScoresRequest struct {
	ExamId int64 `json:"examId"`
}

type ExportScoresResponse struct {
	Message    string `json:"message"`    // 返回的消息
	FileName   string `json:"fileName"`   // 文件名称
	FileStream []byte `json:"fileStream"` // Excel文件的二进制数据
}

type GetExamResultRequest struct {
	ExamId int64 `json:"examId"` // 考试ID
}

type ExamResultResponse struct {
	ExamId         int64            `json:"examId"`         // 考试ID
	ExamName       string           `json:"examName"`       // 考试名称
	TotalScore     int              `json:"totalScore"`     // 试卷总分
	ExamScore      int              `json:"examScore"`      // 学生最终得分
	GradingStatus  string           `json:"gradingStatus"`  // 评分状态
	CanViewResults bool             `json:"canViewResults"` //是否公开题目
	Questions      []QuestionResult `json:"questions"`      // 题目列表
}

type QuestionResult struct {
	QuestionId    int         `json:"questionId"`    // 题目ID
	Content       string      `json:"content"`       // 题目内容
	Type          int         `json:"type"`          // 题目类型（1-单选, 2-多选, 3-填空, 4-简答）
	Options       string      `json:"options"`       // 选项（针对选择题）
	TotalScore    int         `json:"totalScore"`    // 该题满分
	Answer        interface{} `json:"answer"`        //答案
	StudentAnswer interface{} `json:"studentAnswer"` // 学生的答案（格式可能是字符串或数组）
	StudentScore  int         `json:"studentScore"`  // 学生在此题的得分
}
