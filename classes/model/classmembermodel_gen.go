// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.2

package model

import (
	"context"
	"database/sql"

	"fmt"
	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
	"strings"
)

var (
	classMemberFieldNames          = builder.RawFieldNames(&ClassMember{})
	classMemberRows                = strings.Join(classMemberFieldNames, ",")
	classMemberRowsExpectAutoSet   = strings.Join(stringx.Remove(classMemberFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	classMemberRowsWithPlaceHolder = strings.Join(stringx.Remove(classMemberFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	classMemberModel interface {
		Insert(ctx context.Context, data *ClassMember) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*ClassMember, error)
		Update(ctx context.Context, data *ClassMember) error
		Delete(ctx context.Context, id int64) error
		Exists(ctx context.Context, classId, userId int64) (bool, error)
		FindByUserAndClass(ctx context.Context, userId, classId int) (*ClassMember, error)
		IsMemberInTeacherClass(ctx context.Context, teacherId, memberId int) (bool, error)
	}

	defaultClassMemberModel struct {
		conn  sqlx.SqlConn
		table string
	}

	ClassMember struct {
		Id      int64 `db:"id"`       // 班级成员ID（主键）
		ClassId int64 `db:"class_id"` // 班级ID
		UserId  int64 `db:"user_id"`  // 用户ID
	}
)

func newClassMemberModel(conn sqlx.SqlConn) *defaultClassMemberModel {
	return &defaultClassMemberModel{
		conn:  conn,
		table: "`class_member`",
	}
}

func (m *defaultClassMemberModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultClassMemberModel) FindOne(ctx context.Context, id int64) (*ClassMember, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", classMemberRows, m.table)
	var resp ClassMember
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultClassMemberModel) Insert(ctx context.Context, data *ClassMember) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?)", m.table, classMemberRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.ClassId, data.UserId)
	return ret, err
}

func (m *defaultClassMemberModel) Update(ctx context.Context, data *ClassMember) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, classMemberRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.ClassId, data.UserId, data.Id)
	return err
}

func (m *defaultClassMemberModel) tableName() string {
	return m.table
}

func (m *defaultClassMemberModel) Exists(ctx context.Context, classId, userId int64) (bool, error) {
	query := "SELECT COUNT(*) FROM class_member WHERE class_id = ? AND user_id = ?"
	var count int
	err := m.conn.QueryRowCtx(ctx, &count, query, classId, userId)
	if err != nil {
		return false, err
	}
	return count > 0, nil
}
func (m *defaultClassMemberModel) FindByUserAndClass(ctx context.Context, userId, classId int) (*ClassMember, error) {
	query := fmt.Sprintf("SELECT %s FROM %s WHERE user_id = ? AND class_id = ? LIMIT 1", classMemberRows, m.table)
	var member ClassMember
	err := m.conn.QueryRowCtx(ctx, &member, query, userId, classId)
	if err != nil {
		if err == sqlc.ErrNotFound {
			return nil, nil // 用户不在班级中
		}
		return nil, err
	}
	return &member, nil
}

func (m *defaultClassMemberModel) IsMemberInTeacherClass(ctx context.Context, teacherId, memberId int) (bool, error) {
	query := `
		SELECT COUNT(*)
		FROM class_member cm
		JOIN class c ON cm.class_id = c.id
		WHERE cm.id = ? AND c.teacher_id = ?
	`
	var count int
	err := m.conn.QueryRowCtx(ctx, &count, query, memberId, teacherId)
	if err != nil {
		return false, err
	}

	return count > 0, nil
}
