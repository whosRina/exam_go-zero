// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.2

package model

import (
	"context"
	"database/sql"

	"fmt"
	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
	"strings"
)

var (
	classFieldNames          = builder.RawFieldNames(&Class{})
	classRows                = strings.Join(classFieldNames, ",")
	classRowsExpectAutoSet   = strings.Join(stringx.Remove(classFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	classRowsWithPlaceHolder = strings.Join(stringx.Remove(classFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	classModel interface {
		Insert(ctx context.Context, data *Class) (sql.Result, error)
		FindOneByTeacherId(ctx context.Context, id int64, TeacherId int64) (*Class, error)
		FindOneByClassCode(ctx context.Context, classCode string) (*Class, error)
		Update(ctx context.Context, data *Class) error
		Delete(ctx context.Context, id int64, teacherId int64) error
		FindByClassCode(ctx context.Context, classCode string) (*Class, error)
		FindOne(ctx context.Context, id int64) (*Class, error)
	}

	defaultClassModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Class struct {
		Id         int64  `db:"id"`          // 班级ID（主键）
		Name       string `db:"name"`        // 班级名称（即课程名称）
		TeacherId  int64  `db:"teacher_id"`  // 教师ID
		ClassCode  string `db:"class_code"`  // 班级唯一邀请码
		IsJoinable int64  `db:"is_joinable"` // 是否允许加入（0-禁止，1-允许）
	}
)

func newClassModel(conn sqlx.SqlConn) *defaultClassModel {
	return &defaultClassModel{
		conn:  conn,
		table: "`class`",
	}
}

func (m *defaultClassModel) Delete(ctx context.Context, id int64, teacherId int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ? and `teacher_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id, teacherId)
	return err
}

func (m *defaultClassModel) FindOneByTeacherId(ctx context.Context, id int64, TeacherId int64) (*Class, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? and `teacher_id` = ? limit 1", classRows, m.table)
	var resp Class
	err := m.conn.QueryRowCtx(ctx, &resp, query, id, TeacherId)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultClassModel) FindOneByClassCode(ctx context.Context, classCode string) (*Class, error) {
	var resp Class
	query := fmt.Sprintf("select %s from %s where `class_code` = ? limit 1", classRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, classCode)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultClassModel) Insert(ctx context.Context, data *Class) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, classRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Name, data.TeacherId, data.ClassCode, data.IsJoinable)
	return ret, err
}

func (m *defaultClassModel) Update(ctx context.Context, newData *Class) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, classRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.Name, newData.TeacherId, newData.ClassCode, newData.IsJoinable, newData.Id)
	return err
}

func (m *defaultClassModel) tableName() string {
	return m.table
}

// FindByClassCode 根据class_code查找班级信息
func (m *defaultClassModel) FindByClassCode(ctx context.Context, classCode string) (*Class, error) {
	query := fmt.Sprintf("SELECT id, name, teacher_id, class_code, is_joinable FROM %s WHERE class_code = ? LIMIT 1", m.table)
	var class Class
	err := m.conn.QueryRowCtx(ctx, &class, query, classCode)
	if err != nil {
		return nil, err
	}
	return &class, nil
}

func (m *defaultClassModel) FindOne(ctx context.Context, id int64) (*Class, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", classRows, m.table)
	var resp Class
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}
