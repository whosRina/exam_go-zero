// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.2

package handler

import (
	"net/http"
	"time"

	"exam-system/exam/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/createPaper",
				Handler: createPaperHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/createPaperRule",
				Handler: createPaperRuleHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/deletePaper",
				Handler: deletePaperHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/deletePaperRule",
				Handler: deletePaperRuleHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/generatePaperByRuleForTeacher",
				Handler: generatePaperByRuleForTeacherHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/getPaperByRuleForStudent",
				Handler: getPaperByRuleForStudentHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/getPaperDetail",
				Handler: getPaperDetailHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/getPaperRuleDetail",
				Handler: getPaperRuleDetailHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/getPaperWithAnswers",
				Handler: getPaperWithAnswersHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/getPaperForStudent",
				Handler: GetPaperForStudentHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/listPaperRules",
				Handler: listPaperRulesHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/listPapers",
				Handler: listPapersHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/updatePaper",
				Handler: updatePaperHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/updatePaperRule",
				Handler: updatePaperRuleHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/createExam",
				Handler: createExamHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/deleteExam",
				Handler: deleteExamHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/exportScores",
				Handler: exportScoresHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/getExamDetail",
				Handler: getExamDetailHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/ExamDetail",
				Handler: examDetailHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/getExamResult",
				Handler: getExamResultHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/getExamStatistics",
				Handler: getExamStatisticsHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/getStudentScores",
				Handler: getStudentScoresHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/listExams",
				Handler: listExamsHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/listManualGrading",
				Handler: listManualGradingHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/startExam",
				Handler: startExamHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/submitAnswer",
				Handler: submitAnswerHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/submitExam",
				Handler: submitExamHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/submitManualScore",
				Handler: submitManualScoreHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/ManualScore",
				Handler: manualGradeHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/updateExam",
				Handler: updateExamHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/exam"),
		rest.WithTimeout(3000*time.Millisecond),
	)
}
