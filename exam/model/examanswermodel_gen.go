// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.2

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	examAnswerFieldNames          = builder.RawFieldNames(&ExamAnswer{})
	examAnswerRows                = strings.Join(examAnswerFieldNames, ",")
	examAnswerRowsExpectAutoSet   = strings.Join(stringx.Remove(examAnswerFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	examAnswerRowsWithPlaceHolder = strings.Join(stringx.Remove(examAnswerFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	examAnswerModel interface {
		Insert(ctx context.Context, data *ExamAnswer) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*ExamAnswer, error)
		Update(ctx context.Context, data *ExamAnswer) error
		Delete(ctx context.Context, id int64) error
		FindOneByAttempt(ctx context.Context, attemptId int64) (*ExamAnswer, error)
		FindOneByAttemptAndStudent(ctx context.Context, attemptId int64, studentId int64) (*ExamAnswer, error)
	}

	defaultExamAnswerModel struct {
		conn  sqlx.SqlConn
		table string
	}

	ExamAnswer struct {
		Id            int64     `db:"id"`             // 记录ID
		AttemptId     int64     `db:"attempt_id"`     // 关联exam_attempt表
		Answer        string    `db:"answer"`         // 学生答案（JSON格式）
		ScoreDetails  string    `db:"score_details"`  // 每题得分详情
		GradingStatus string    `db:"grading_status"` // 评分状态
		SubmitTime    time.Time `db:"submit_time"`    // 提交时间
		CreatedAt     time.Time `db:"created_at"`     // 记录创建时间
	}
)

func newExamAnswerModel(conn sqlx.SqlConn) *defaultExamAnswerModel {
	return &defaultExamAnswerModel{
		conn:  conn,
		table: "`exam_answer`",
	}
}

func (m *defaultExamAnswerModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultExamAnswerModel) FindOne(ctx context.Context, id int64) (*ExamAnswer, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", examAnswerRows, m.table)
	var resp ExamAnswer
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultExamAnswerModel) Insert(ctx context.Context, data *ExamAnswer) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, examAnswerRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.AttemptId, data.Answer, data.ScoreDetails, data.GradingStatus, data.SubmitTime)
	return ret, err
}

func (m *defaultExamAnswerModel) Update(ctx context.Context, data *ExamAnswer) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, examAnswerRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.AttemptId, data.Answer, data.ScoreDetails, data.GradingStatus, data.SubmitTime, data.Id)
	return err
}

func (m *defaultExamAnswerModel) tableName() string {
	return m.table
}

func (m *defaultExamAnswerModel) FindOneByAttempt(ctx context.Context, attemptId int64) (*ExamAnswer, error) {
	query := fmt.Sprintf("SELECT %s FROM %s WHERE `attempt_id` = ? LIMIT 1", examAnswerRows, m.table)
	var resp ExamAnswer
	err := m.conn.QueryRowCtx(ctx, &resp, query, attemptId)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}
func (m *defaultExamAnswerModel) FindOneByAttemptAndStudent(ctx context.Context, attemptId int64, studentId int64) (*ExamAnswer, error) {
	query := fmt.Sprintf("SELECT %s FROM %s WHERE `id` = ? AND `student_id` = ? LIMIT 1", examAnswerRows, m.table)
	var resp ExamAnswer
	err := m.conn.QueryRowCtx(ctx, &resp, query, attemptId, studentId)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}
