// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.2

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	examAttemptFieldNames          = builder.RawFieldNames(&ExamAttempt{})
	examAttemptRows                = strings.Join(examAttemptFieldNames, ",")
	examAttemptRowsExpectAutoSet   = strings.Join(stringx.Remove(examAttemptFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	examAttemptRowsWithPlaceHolder = strings.Join(stringx.Remove(examAttemptFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	examAttemptModel interface {
		Insert(ctx context.Context, data *ExamAttempt) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*ExamAttempt, error)
		Update(ctx context.Context, data *ExamAttempt) error
		Delete(ctx context.Context, id int64) error
		FindAttemptByExamAndStudent(ctx context.Context, examId, studentId int64) (*ExamAttempt, error)
		FindSubmittedAttempts(ctx context.Context, examId int64) ([]*ExamAttempt, error)
		FindAttemptByExam(ctx context.Context, examId int64) ([]ExamAttempt, error)
	}

	defaultExamAttemptModel struct {
		conn  sqlx.SqlConn
		table string
	}

	ExamAttempt struct {
		Id               int64     `db:"id"`                 // 记录ID
		ExamId           int64     `db:"exam_id"`            // 关联exam表
		StudentId        int64     `db:"student_id"`         // 关联学生（user表）
		PaperId          int64     `db:"paper_id"`           // 固定试卷ID（exam_type=fixed时使用）
		GeneratedPaperId int64     `db:"generated_paper_id"` // 随机试卷ID（exam_type=random时使用）
		Score            int64     `db:"score"`              // 学生成绩（未评定前为NULL）
		Status           string    `db:"status"`             // 考试状态
		StartTime        time.Time `db:"start_time"`         // 学生开始考试时间
		SubmitTime       time.Time `db:"submit_time"`        // 提交时间
		CreatedAt        time.Time `db:"created_at"`         // 记录创建时间
	}
)

func newExamAttemptModel(conn sqlx.SqlConn) *defaultExamAttemptModel {
	return &defaultExamAttemptModel{
		conn:  conn,
		table: "`exam_attempt`",
	}
}

func (m *defaultExamAttemptModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultExamAttemptModel) FindOne(ctx context.Context, id int64) (*ExamAttempt, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", examAttemptRows, m.table)
	var resp ExamAttempt
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultExamAttemptModel) Insert(ctx context.Context, data *ExamAttempt) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?)", m.table, examAttemptRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.ExamId, data.StudentId, data.PaperId, data.GeneratedPaperId, data.Score, data.Status, data.StartTime, data.SubmitTime)
	return ret, err
}

func (m *defaultExamAttemptModel) Update(ctx context.Context, data *ExamAttempt) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, examAttemptRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.ExamId, data.StudentId, data.PaperId, data.GeneratedPaperId, data.Score, data.Status, data.StartTime, data.SubmitTime, data.Id)
	return err
}

func (m *defaultExamAttemptModel) tableName() string {
	return m.table
}

func (m *defaultExamAttemptModel) FindAttemptByExamAndStudent(ctx context.Context, examId, studentId int64) (*ExamAttempt, error) {
	query := fmt.Sprintf("select %s from %s where `exam_id` = ? and `student_id` = ? limit 1", examAttemptRows, m.table)
	var resp ExamAttempt
	err := m.conn.QueryRowCtx(ctx, &resp, query, examId, studentId)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, nil
	default:
		return nil, err
	}
}
func (m *defaultExamAttemptModel) FindAttemptByExam(ctx context.Context, examId int64) ([]ExamAttempt, error) {
	query := fmt.Sprintf("select %s from %s where `exam_id` = ? ", examAttemptRows, m.table)
	var resp []ExamAttempt
	err := m.conn.QueryRowsCtx(ctx, &resp, query, examId)
	switch err {
	case nil:
		return resp, nil
	case sqlx.ErrNotFound:
		return nil, nil
	default:
		return nil, err
	}
}

func (m *defaultExamAttemptModel) FindSubmittedAttempts(ctx context.Context, examId int64) ([]*ExamAttempt, error) {
	query := fmt.Sprintf("SELECT %s FROM %s WHERE exam_id = ? AND status = ?",
		examAttemptRows, m.table)
	var attempts []*ExamAttempt
	err := m.conn.QueryRowsCtx(ctx, &attempts, query, examId, "submitted")
	if err != nil {
		return nil, err
	}
	return attempts, nil
}
