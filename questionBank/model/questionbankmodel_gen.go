// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.2

package model

import (
	"context"
	"database/sql"
	"exam-system/questionBank/internal/types"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	questionBankFieldNames          = builder.RawFieldNames(&QuestionBank{})
	questionBankRows                = strings.Join(questionBankFieldNames, ",")
	questionBankRowsExpectAutoSet   = strings.Join(stringx.Remove(questionBankFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	questionBankRowsWithPlaceHolder = strings.Join(stringx.Remove(questionBankFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	questionBankModel interface {
		Insert(ctx context.Context, data *QuestionBank) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*QuestionBank, error)
		Update(ctx context.Context, data *QuestionBank) error
		Delete(ctx context.Context, id int64) error
		FindById(ctx context.Context, id int) (*QuestionBank, error)
		FindAllById(ctx context.Context, id int64) ([]*QuestionBank, error)
		GetBankDetailAndTypeCounts(ctx context.Context, bankID int64) (*types.BankDetailResponse, error)
	}

	defaultQuestionBankModel struct {
		conn  sqlx.SqlConn
		table string
	}

	QuestionBank struct {
		Id        int64     `db:"id"`         // 题库ID
		Name      string    `db:"name"`       // 题库名称
		CreatedBy int64     `db:"created_by"` // 创建者ID（关联user表）
		CreatedAt time.Time `db:"created_at"` // 创建时间
	}
)

func newQuestionBankModel(conn sqlx.SqlConn) *defaultQuestionBankModel {
	return &defaultQuestionBankModel{
		conn:  conn,
		table: "`question_bank`",
	}
}

func (m *defaultQuestionBankModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultQuestionBankModel) FindOne(ctx context.Context, id int64) (*QuestionBank, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", questionBankRows, m.table)
	var resp QuestionBank
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultQuestionBankModel) Insert(ctx context.Context, data *QuestionBank) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?)", m.table, questionBankRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Name, data.CreatedBy)
	return ret, err
}

func (m *defaultQuestionBankModel) Update(ctx context.Context, data *QuestionBank) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, questionBankRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Name, data.CreatedBy, data.Id)
	return err
}

func (m *defaultQuestionBankModel) tableName() string {
	return m.table
}

func (m *defaultQuestionBankModel) FindById(ctx context.Context, id int) (*QuestionBank, error) {
	query := "SELECT id, name, created_by, created_at FROM question_bank WHERE id = ? LIMIT 1"
	var bank QuestionBank
	err := m.conn.QueryRowCtx(ctx, &bank, query, id)
	if err != nil {
		if err == sql.ErrNoRows {
			return nil, nil // 题库不存在
		}
		return nil, err // 其他 SQL 执行错误
	}
	return &bank, nil
}

func (m *defaultQuestionBankModel) FindAllById(ctx context.Context, id int64) ([]*QuestionBank, error) {
	query := "SELECT * FROM question_bank WHERE created_by = ?"
	var banks []*QuestionBank
	err := m.conn.QueryRowsCtx(ctx, &banks, query, id)
	if err != nil {
		return nil, err
	}

	return banks, nil
}

func (m *defaultQuestionBankModel) GetBankDetailAndTypeCounts(ctx context.Context, bankID int64) (*types.BankDetailResponse, error) {
	// 获取题库信息，包括题库创建人（教师）的姓名
	bankQuery := `
        SELECT 
            b.id, 
            b.name AS bank_name, 
            b.created_at, 
            u.name AS creator_name 
        FROM 
            question_bank b
        JOIN 
            users u ON b.created_by = u.id
        WHERE 
            b.id = ?
    `
	var bankInfo types.BankInfo
	err := m.conn.QueryRowCtx(ctx, &bankInfo, bankQuery, bankID)
	if err != nil {
		return nil, err
	}

	// 获取不同题目类型的数量
	typeCountQuery := `
        SELECT 
            q.type, 
            COUNT(*) AS count 
        FROM 
            question q
        WHERE 
            q.bank_id = ?
        GROUP BY 
            q.type
    `
	var typeCounts []*types.QuestionTypeCount
	err = m.conn.QueryRowsCtx(ctx, &typeCounts, typeCountQuery, bankID)
	if err != nil {
		return nil, err
	}

	// 构建返回结果
	return &types.BankDetailResponse{
		BankInfo:   bankInfo,   // 题库信息
		TypeCounts: typeCounts, // 不同题型的数量
	}, nil
}
